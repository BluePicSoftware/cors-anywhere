# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Docker build, push & rollout (production)

on:
  push:
    branches: [ master ]

jobs:
  dockerize:

    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: cors-anywhere:latest
      IMAGE_FULL_NAME: registry.services.bluepic.de:443/bluepic/cors-anywhere:latest

    steps:
    - uses: actions/checkout@v2
    - name: Docker Login
      # You may pin to the exact commit or the version.
      # uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      uses: docker/login-action@v1.10.0
      with:
        # Server address of Docker registry. If not set then will default to Docker Hub
        registry: registry.services.bluepic.de:443
        # Username used to log against the Docker registry
        username: bluepic
        # Password or personal access token used to log against the Docker registry
        password: ${{ secrets.DOCKER_REGISTRY_USER_BLUEPIC_PW }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install dependencies
      run: npm install

    - name: Build docker image
      run: docker build . -t $IMAGE_NAME --platform=linux/amd64

    - name: Tag docker image
      run: docker tag $IMAGE_NAME $IMAGE_FULL_NAME

    - name: Push docker image to registry
      run: docker image push $IMAGE_FULL_NAME

    - name: Cleanup docker environment
      run: rm -rf /home/runner/.docker/config.json





  deploy-k3s:

    runs-on: ubuntu-latest
    needs: [ dockerize ]
    env:
      NAMESPACE: cors-anywhere-ns
      MAIN_NAME: cors-anywhere
      DOMAIN: cors-anywhere.c2.bluepic.de
      IMAGE_FULL_NAME: registry.services.bluepic.de/bluepic/cors-anywhere:latest
      MIN_REPLICAS: 2
      MAX_REPLICAS: 3
      MEMORY_REQUEST: "256Mi"
      CPU_REQUEST: "200m"
      MEMORY_LIMIT: "1024Mi"
      CPU_LIMIT: "300m"
      HETZNER_TYPE: cpx41

    steps:
    - uses: actions/checkout@v2

    - name: Kubernetes set context
      uses: Azure/k8s-set-context@v1.1
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG }}


    - name: Inject namespace from env
      run: sed -i -e "s|-NAMESPACE-|$NAMESPACE|g" k3s.yaml

    - name: Inject main name from env
      run: sed -i -e "s|-MAIN_NAME-|$MAIN_NAME|g" k3s.yaml

    - name: Inject domain from env
      run: sed -i -e "s|-DOMAIN-|$DOMAIN|g" k3s.yaml

    - name: Inject request cpu from env
      run: sed -i -e "s|-HETZNER_TYPE-|$HETZNER_TYPE|g" k3s.yaml

    - name: Inject image from env
      run: sed -i -e "s|-IMAGE_FULL_NAME-|$IMAGE_FULL_NAME|g" k3s.yaml

    - name: Inject max replicas from env
      run: sed -i -e "s|-MAX_REPLICAS-|$MAX_REPLICAS|g" k3s.yaml

    - name: Inject min replicas from env
      run: sed -i -e "s|-MIN_REPLICAS-|$MIN_REPLICAS|g" k3s.yaml

    - name: Inject limit memory from env
      run: sed -i -e "s|-MEMORY_LIMIT-|$MEMORY_LIMIT|g" k3s.yaml

    - name: Inject limit cpu from env
      run: sed -i -e "s|-CPU_LIMIT-|$CPU_LIMIT|g" k3s.yaml

    - name: Inject request memory from env
      run: sed -i -e "s|-MEMORY_REQUEST-|$MEMORY_REQUEST|g" k3s.yaml

    - name: Inject request cpu from env
      run: sed -i -e "s|-CPU_REQUEST-|$CPU_REQUEST|g" k3s.yaml


    # Inject secrets
    - name: Inject registry secret
      run: sed -i -e "s|-REGISTRY_SECRET-|${{ secrets.REGISTRY_SECRET }}|g" k3s.yaml

    - name: Inject jwt secret
      run: sed -i -e "s|-JWT_SECRET-|${{ secrets.JWT_SECRET }}|g" k3s.yaml

    - name: Inject log dna ingestion key secret
      run: sed -i -e "s|-LOGDNA_INGESTION_KEY-|${{ secrets.LOGDNA_INGESTION_KEY }}|g" k3s.yaml
    # Inject Secrets ^

    - name: Inject npm token
      run: sed -i -e "s|-NPM_TOKEN-|${{ secrets.NPM_TOKEN }}|g" k3s.yaml


    - name: Print k3s.yaml
      run: cat k3s.yaml


    - name: Deploy to cluster
      run: kubectl apply -f k3s.yaml


    - name: Roll out
      run: kubectl -n $NAMESPACE rollout restart deployment/$MAIN_NAME 






# Inject secrets
#- name: Inject JWT Secret
#  run: kubectl -n templates-ns delete secret --ignore-not-found $name && kubectl -n templates-ns create secret generic $name --from-literal=secret=$secret
#  env:
#    name: jwt-secret
#    secret: ${{ secrets.JWT_SECRET }}

#- name: Inject LOGDNA INGESTION KEY
#  run: kubectl -n templates-ns delete secret --ignore-not-found $name && kubectl -n templates-ns create secret generic $name --from-literal=secret=$secret
#  env:
#    name: log-dna-ingestion-key
#    secret: ${{ secrets.LOGDNA_INGESTION_KEY }}

#- name: Inject REGISTRY CONFIG
#  run: kubectl -n templates-ns delete secret --ignore-not-found $name && kubectl -n templates-ns create secret generic $name --from-literal=.dockerconfigjson=$secret
#  env:
#    name: docker-registry-config
#    secret: ${{ secrets.DOCKER_REGISTRY_CONFIG }}
# Inject Secrets ^
