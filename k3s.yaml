apiVersion: v1
data:
  .dockerconfigjson: -REGISTRY_SECRET-
kind: Secret
metadata:
  name: bluepic-registry-key
  namespace: -NAMESPACE- # namespace of the project. Search and replace this. Make sure to change in workflow as well
type: kubernetes.io/dockerconfigjson
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: -MAIN_NAME- # name of the project. Search and replace this. Make sure to change in workflow as well
  namespace: -NAMESPACE-
spec:
  selector:
    matchLabels:
      app: -MAIN_NAME-
  template:
    metadata:
      labels:
        app: -MAIN_NAME-
    spec:
      topologySpreadConstraints:
      - maxSkew: 1 # max amount of unevenness across nodes (min 1)
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector: 
          matchLabels:
            app: -MAIN_NAME-
      containers:
      - name: -MAIN_NAME-
        image: -IMAGE_FULL_NAME-
        imagePullPolicy: "Always"
        env: # environment variables. Everything you put in your .env
        - name: PORT
          value: "80"
        - name: DEFAULT_ORIGIN
          value: "https://drive.google.com"
        - name: NODE_ENV
          value: "production"
        # - name: NPM_TOKEN
        #   value: "-NPM_TOKEN-"
        
        ports:
        - containerPort: 80 # port that the container listens on
        resources:
          requests:
            memory: -MEMORY_REQUEST-
            cpu: -CPU_REQUEST-
          limits:
            memory: -MEMORY_LIMIT-
            cpu: -CPU_LIMIT-
        startupProbe: # checks if pod started up correctly, if it fails, pod will be killed and a new one created in its place
          httpGet:
            path: / # path of your health check endpoint
            port: 80 # port of your health check endpoint
          failureThreshold: 60 # maximum of failed checks 
          periodSeconds: 5 # check interval. Keep this low; liveness probes only start after startup probe is successful
        livenessProbe: # checks for liveness periodically, if it fails, pod will be killed and a new one created in its place
          httpGet:
            path: / # path of your health check endpoint
            port: 80 # port of your health check endpoint
          failureThreshold: 3 # maximum of failed checks
          periodSeconds: 10 # check interval
        readinessProbe: # checks for readyness periodically, if it fails, pod will be taken off the network to finish it's task in peace
          httpGet:
            path: / # path of your health check endpoint
            port: 80 # port of your health check endpoint
          timeoutSeconds: 2 # timeout before probe fails
          periodSeconds: 5 # check interval
      imagePullSecrets:
      - name: bluepic-registry-key
      nodeSelector:
        node.kubernetes.io/instance-type: -HETZNER_TYPE- # type of node server. Ask an admin on the available types
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: -MAIN_NAME--autoscaler
  namespace: -NAMESPACE-
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: -MAIN_NAME-
  minReplicas: -MIN_REPLICAS- # minimum amount of replicas
  maxReplicas: -MAX_REPLICAS- # maximum amount of replicas
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50 # CPU Utilization at which K8s starts creating a new replica
---

apiVersion: v1
kind: Service
metadata:
  name: -MAIN_NAME--service
  namespace: -NAMESPACE-
spec:
  type: NodePort
  selector:
    app: -MAIN_NAME-
  ports:
  - port: 80 # kubernetes internal network
    targetPort: 80 # same as containerPort ^
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: -MAIN_NAME--ingress
  namespace: -NAMESPACE-
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 8m
spec:
  ingressClassName: nginx
  rules:
    - host: -DOMAIN- # Domain
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: -MAIN_NAME--service
                port:
                  number: 80 #  ^ same as service  port
